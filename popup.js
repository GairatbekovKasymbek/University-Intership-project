document.addEventListener("DOMContentLoaded", function () {
  const scanBtn = document.getElementById("scanBtn");
  const results = document.getElementById("results");
  const loading = document.getElementById("loading");
  const riskLevel = document.getElementById("riskLevel");
  const details = document.getElementById("details");
  const errorMessage = document.getElementById("errorMessage");
  const warningBadges = document.getElementById("warningBadges");

  const recommendationsList = document.getElementById("recommendationsList");

  const btnEn = document.getElementById("btn-en");
  const btnRu = document.getElementById("btn-ru");
  const btnKy = document.getElementById("btn-ky"); // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ

  // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: 'en', 'ru' –∏–ª–∏ 'ky'
  let currentLang = "en";

  // –¢–µ–∫—Å—Ç—ã –¥–ª—è —è–∑—ã–∫–æ–≤
  const texts = {
    en: {
      scanButton: "Scan Current Email",
      phishingDetector: "‚úâÔ∏è Phishing Detector",
      errorNotSupported:
        "Please open an email in Gmail, Outlook, or Yahoo Mail to scan.",
      analyzing: "Analyzing email... üîç",
      detectedIssues: "Detected Issues:",
      noIssues: "No suspicious elements detected.",
      recommendationsTitle: "Recommendations:",
      riskLevels: {
        high: "üî¥ High Risk - Likely Phishing Attempt",
        suspicious: "üü° Suspicious - Exercise Caution",
        low: "üü¢ Low Risk - No Obvious Red Flags",
      },
      recommendations: {
        high: [
          "Do not click any links in this email",
          "Do not download any attachments",
          "Do not reply to this email",
          "Report this email as phishing",
        ],
        suspicious: [
          "Verify the sender through other means",
          "Do not provide sensitive information",
          "When in doubt, contact the company directly",
        ],
        low: [
          "Always remain vigilant with email communications",
          "Keep your security software up to date",
        ],
      },
      badges: {
        urgency: "üö® Urgency Tactics",
        links: "üîó Suspicious Links",
        generic: "üë§ Generic/Impersonal",
        sensitive: "‚ö†Ô∏è Asks for Sensitive Info",
        pressure: "üïí Time Pressure",
        spoofing: "üè¢ Possible Spoofing",
      },
      clickToHighlight: "(click to highlight)",
    },
    ru: {
      scanButton: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–∏—Å—å–º–æ",
      phishingDetector: "‚úâÔ∏è –û–±–Ω–∞—Ä—É–∂–∏—Ç–µ–ª—å –§–∏—à–∏–Ω–≥–∞",
      errorNotSupported:
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∏—Å—å–º–æ –≤ Gmail, Outlook –∏–ª–∏ Yahoo Mail –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
      analyzing: "–ê–Ω–∞–ª–∏–∑ –ø–∏—Å—å–º–∞... üîç",
      detectedIssues: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:",
      noIssues: "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.",
      recommendationsTitle: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
      riskLevels: {
        high: "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–∞—è —Ñ–∏—à–∏–Ω–≥–æ–≤–∞—è –∞—Ç–∞–∫–∞",
        suspicious: "üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ ‚Äî –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã",
        low: "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ ‚Äî —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ—Ç",
      },
      recommendations: {
        high: [
          "–ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –≤ —ç—Ç–æ–º –ø–∏—Å—å–º–µ",
          "–ù–µ —Å–∫–∞—á–∏–≤–∞–π—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è",
          "–ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ",
          "–°–æ–æ–±—â–∏—Ç–µ –æ –ø–∏—Å—å–º–µ –∫–∞–∫ –æ —Ñ–∏—à–∏–Ω–≥–µ",
        ],
        suspicious: [
          "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏",
          "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
          "–í —Å–ª—É—á–∞–µ —Å–æ–º–Ω–µ–Ω–∏–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–º–ø–∞–Ω–∏–µ–π –Ω–∞–ø—Ä—è–º—É—é",
        ],
        low: [
          "–í—Å–µ–≥–¥–∞ –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∏—Å—å–º–∞–º–∏",
          "–û–±–Ω–æ–≤–ª—è–π—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–æ–µ –ü–û",
        ],
      },
      badges: {
        urgency: "üö® –¢–∞–∫—Ç–∏–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏",
        links: "üîó –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏",
        generic: "üë§ –û–±—â–µ–µ/–ë–µ–∑–ª–∏—á–Ω–æ–µ",
        sensitive: "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        pressure: "üïí –î–∞–≤–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
        spoofing: "üè¢ –í–æ–∑–º–æ–∂–Ω–æ–µ –ø–æ–¥–¥–µ–ª—ã–≤–∞–Ω–∏–µ",
      },
      clickToHighlight: "(–∫–ª–∏–∫ ‚Äî –≤—ã–¥–µ–ª–∏—Ç—å)",
    },
    ky: {
      scanButton: "–£—á—É—Ä–¥–∞–≥—ã –∫–∞—Ç—Ç—ã —Å–∫–∞–Ω–µ—Ä–ª”©”©",
      phishingDetector: "‚úâÔ∏è –§–∏—à–∏–Ω–≥–¥–∏ –∞–Ω—ã–∫—Ç–æ–æ—á—É",
      errorNotSupported:
        "–°–∫–∞–Ω–µ—Ä–ª”©”© “Ø—á“Ø–Ω Gmail, Outlook –∂–µ Yahoo Mail–¥–µ–≥–∏ –∫–∞—Ç—Ç—ã –∞—á—ã“£—ã–∑.",
      analyzing: "–ö–∞—Ç –∞–Ω–∞–ª–∏–∑–¥–µ–ª“Ø“Ø–¥”©... üîç",
      detectedIssues: "–¢–∞–±—ã–ª–≥–∞–Ω –∫”©–π–≥”©–π–ª”©—Ä:",
      noIssues: "–®–µ–∫—Ç“Ø“Ø —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.",
      recommendationsTitle: "–ö–µ“£–µ—à—Ç–µ—Ä:",
      riskLevels: {
        high: "üî¥ –ñ–æ–≥–æ—Ä–∫—É —Ç–æ–±–æ–∫–µ–ª–¥–∏–∫ ‚Äî –º“Ø–º–∫“Ø–Ω —Ñ–∏—à–∏–Ω–≥",
        suspicious: "üü° –®–µ–∫—Ç“Ø“Ø ‚Äî —Å–∞–∫ –±–æ–ª—É“£—É–∑",
        low: "üü¢ –¢”©–º”©–Ω —Ç–æ–±–æ–∫–µ–ª–¥–∏–∫ ‚Äî –∫”©—Ä“Ø–Ω“Ø–∫—Ç“Ø“Ø –±–µ–ª–≥–∏–ª–µ—Ä –∂–æ–∫",
      },
      recommendations: {
        high: [
          "–ö–∞—Ç—Ç–∞–≥—ã —à–∏–ª—Ç–µ–º–µ–ª–µ—Ä–≥–µ –±–∞—Å–ø–∞“£—ã–∑",
          "–¢–∏—Ä–∫–µ–º–µ–ª–µ—Ä–¥–∏ –∂“Ø–∫—Ç”©–ø –∞–ª–±–∞“£—ã–∑",
          "–ë—É–ª –∫–∞—Ç–∫–∞ –∂–æ–æ–ø –∂–∞–∑–±–∞“£—ã–∑",
          "–ö–∞—Ç—Ç—ã —Ñ–∏—à–∏–Ω–≥ –∫–∞—Ç–∞—Ä—ã –±–∏–ª–¥–∏—Ä“Ø“Ø",
        ],
        suspicious: [
          "–ñ”©–Ω”©—Ç“Ø“Ø—á“Ø–Ω“Ø –±–∞—à–∫–∞ –∂–æ–ª–¥–æ—Ä –º–µ–Ω–µ–Ω —Ç–µ–∫—à–µ—Ä–∏“£–∏–∑",
          "–ñ–µ–∫–µ –º–∞–∞–ª—ã–º–∞—Ç –±–µ—Ä–±–µ“£–∏–∑",
          "–®–µ–∫—Ç“Ø“Ø —É—á—É—Ä–¥–∞ –∫–æ–º–ø–∞–Ω–∏—è –º–µ–Ω–µ–Ω —Ç“Ø–∑–¥”©–Ω-—Ç“Ø–∑ –±–∞–π–ª–∞–Ω—ã—à–∫—ã–ª–∞",
        ],
        low: [
          "–ö–∞—Ç –∞–ª–º–∞—à—É—É–¥–∞ –¥–∞–π—ã–º–∞ —Å–∞–∫ –±–æ–ª—É“£—É–∑",
          "–ö–æ–æ–ø—Å—É–∑–¥—É–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—Ä—ã“£—ã–∑–¥—ã –∂–∞“£—ã–ª–∞–ø —Ç—É—Ä—É“£—É–∑",
        ],
      },
      badges: {
        urgency: "üö® ”®–∑–≥”©—á”© –∫—ã—Ä–¥–∞–∞–ª —Ç–∞–∫—Ç–∏–∫–∞—Å—ã",
        links: "üîó –®–µ–∫—Ç“Ø“Ø —à–∏–ª—Ç–µ–º–µ–ª–µ—Ä",
        generic: "üë§ –ñ–∞–ª–ø—ã/–ñ–µ–∫–µ —ç–º–µ—Å",
        sensitive: "‚ö†Ô∏è –ñ–µ–∫–µ –º–∞–∞–ª—ã–º–∞—Ç —Å—É—Ä–∞–ª—ã–ø –∂–∞—Ç–∞—Ç",
        pressure: "üïí –£–±–∞–∫—ã—Ç –±–∞—Å—ã–º—ã",
        spoofing: "üè¢ –ú“Ø–º–∫“Ø–Ω –±–æ–ª–≥–æ–Ω –∂–∞—Å–∞–ª–º–∞",
      },
      clickToHighlight: "(–±–∞—Å—É—É ‚Äî –±–µ–ª–≥–∏–ª”©”©)",
    },
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ UI
  function updateLanguageUI() {
    const t = texts[currentLang];
    scanBtn.textContent = t.scanButton;
    document.querySelector("h1").textContent = t.phishingDetector;
    loading.textContent = t.analyzing;

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    for (const [type, label] of Object.entries(t.badges)) {
      const badge = warningBadges.querySelector(`[data-type="${type}"]`);
      if (badge) badge.textContent = label;
    }

    // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ–±–Ω–æ–≤–∏–º –∏—Ö, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫
    if (results.style.display === "block" && lastAnalysis) {
      displayResults(lastAnalysis);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
  let lastAnalysis = null;

  btnEn.addEventListener("click", () => {
    currentLang = "en";
    updateLanguageUI();
  });

  btnRu.addEventListener("click", () => {
    currentLang = "ru";
    updateLanguageUI();
  });

  btnKy.addEventListener("click", () => {
    currentLang = "ky";
    updateLanguageUI();
  });

  scanBtn.addEventListener("click", async () => {
    // Reset UI
    loading.style.display = "block";
    results.style.display = "none";
    errorMessage.style.display = "none";
    scanBtn.disabled = true;

    try {
      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });

      const supportedDomains = [
        "mail.google.com",
        "outlook.live.com",
        "outlook.office.com",
        "mail.yahoo.com",
      ];

      const url = new URL(tab.url);
      if (!supportedDomains.includes(url.hostname)) {
        throw new Error(texts[currentLang].errorNotSupported);
      }

      const response = await new Promise((resolve, reject) => {
        chrome.tabs.sendMessage(
          tab.id,
          { action: "getEmailContent" },
          (response) => {
            if (chrome.runtime.lastError) {
              reject(new Error(chrome.runtime.lastError.message));
              return;
            }
            if (!response) {
              reject(new Error("Empty response from content script"));
              return;
            }
            resolve(response);
          }
        );
      });

      lastAnalysis = response; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      displayResults(response);
    } catch (error) {
      console.error("Error:", error);
      errorMessage.textContent =
        error.message || "Error analyzing email. Please try again.";
      errorMessage.style.display = "block";
      results.style.display = "none";
    } finally {
      loading.style.display = "none";
      scanBtn.disabled = false;
    }
  });

  async function highlightIssue(text, location) {
    try {
      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });
      await chrome.tabs.sendMessage(tab.id, {
        action: "highlightText",
        text: text,
        location: location,
      });
    } catch (error) {
      console.error("Error highlighting text:", error);
    }
  }

  function createClickableListItem(issue) {
    const li = document.createElement("li");
    li.textContent = issue.detail;
    li.style.cursor = "pointer";
    li.style.padding = "5px";
    li.style.marginBottom = "5px";
    li.style.borderRadius = "4px";
    li.style.transition = "background-color 0.2s";

    li.addEventListener("mouseenter", () => {
      li.style.backgroundColor = "#f0f0f0";
    });

    li.addEventListener("mouseleave", () => {
      li.style.backgroundColor = "transparent";
    });

    if (issue.text && issue.location) {
      li.addEventListener("click", () => {
        highlightIssue(issue.text, issue.location);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º —è–∑—ã–∫–∞
      li.innerHTML +=
        ' <span style="color: #6c5ce7; font-size: 12px;">' +
        texts[currentLang].clickToHighlight +
        "</span>";
    }

    return li;
  }

  function displayResults(analysis) {
    results.style.display = "block";

    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –±–µ–π–¥–∂–∏
    warningBadges.querySelectorAll(".badge").forEach((badge) => {
      badge.style.display = "none";
      badge.classList.remove("active");
    });

    let riskClass = "";
    let riskText = "";
    let recommendations = [];
    let activeBadges = new Set();

    // –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if (analysis.highRiskFactors) {
      analysis.highRiskFactors.forEach((factor) => {
        activeBadges.add(factor.type);
      });
    }
    if (analysis.warnings) {
      analysis.warnings.forEach((warning) => {
        activeBadges.add(warning.type);
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–µ–π–¥–∂–∏ —Å –Ω–∞–¥–ø–∏—Å—è–º–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    activeBadges.forEach((type) => {
      const badge = warningBadges.querySelector(`[data-type="${type}"]`);
      if (badge) {
        badge.style.display = "flex";
        badge.classList.add("active");
        badge.textContent =
          texts[currentLang].badges[type] || badge.textContent;
      }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (analysis.highRiskFactors && analysis.highRiskFactors.length > 0) {
      riskClass = "high-risk";
      riskText = texts[currentLang].riskLevels.high;
      recommendations = texts[currentLang].recommendations.high;
    } else if (analysis.warnings && analysis.warnings.length > 0) {
      riskClass = "suspicious";
      riskText = texts[currentLang].riskLevels.suspicious;
      recommendations = texts[currentLang].recommendations.suspicious;
    } else {
      riskClass = "low-risk";
      riskText = texts[currentLang].riskLevels.low;
      recommendations = texts[currentLang].recommendations.low;
    }

    riskLevel.className = `risk-level ${riskClass}`;
    riskLevel.textContent = riskText;

    if (
      (analysis.highRiskFactors && analysis.highRiskFactors.length > 0) ||
      (analysis.warnings && analysis.warnings.length > 0)
    ) {
      const detailsList = document.createElement("ul");
      detailsList.style.listStyle = "none";
      detailsList.style.padding = "0";

      if (analysis.highRiskFactors) {
        analysis.highRiskFactors.forEach((factor) => {
          detailsList.appendChild(createClickableListItem(factor));
        });
      }

      if (analysis.warnings) {
        analysis.warnings.forEach((warning) => {
          detailsList.appendChild(createClickableListItem(warning));
        });
      }

      details.innerHTML = `<h3>${texts[currentLang].detectedIssues}</h3>`;
      details.appendChild(detailsList);
    } else {
      details.innerHTML = `<p>${texts[currentLang].noIssues}</p>`;
    }

    recommendationsList.innerHTML = recommendations
      .map((rec) => `<li>${rec}</li>`)
      .join("");
    warningBadges.style.display = activeBadges.size > 0 ? "flex" : "none";
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  updateLanguageUI();
});
